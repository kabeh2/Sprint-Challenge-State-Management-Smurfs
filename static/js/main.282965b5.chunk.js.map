{"version":3,"sources":["redux/actions/actionCreators.js","redux/actions/actionTypes.js","components/forms/TextInput.js","components/SmurfForm.jsx","components/SmurfList.jsx","components/App.js","redux/reducers/index.js","index.js"],"names":["apiEndpoint","fetchSuccess","data","type","payload","fetchError","error","updateData","oldUser","user","dispatch","a","async","axios","put","id","users","message","MyTextInput","label","props","useField","field","meta","className","htmlFor","name","touched","connect","state","updating","postData","obj","post","useEffect","console","log","enableReinitialize","initialValues","age","height","validationSchema","Yup","max","required","moreThan","round","onSubmit","values","setSubmitting","setErrors","setStatus","resetForm","success","submit","TextInput","placeholder","deleteData","getState","previousSmurfs","smurfs","filter","smurf","delete","updateRequest","scope","map","index","key","onClick","App","this","fetchData","Component","get","initialState","loading","reducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.282965b5.chunk.js","sourcesContent":["import axios from \"axios\";\nimport * as actionType from \"./actionTypes\";\n\nconst apiEndpoint = \"http://localhost:3333/smurfs\";\n\nexport const fetchRequest = () => {\n  return {\n    type: actionType.FETCH_REQUEST\n  };\n};\n\nexport const fetchSuccess = data => {\n  return {\n    type: actionType.FETCH_SUCCESS,\n    payload: data\n  };\n};\n\nexport const fetchError = error => {\n  return {\n    type: actionType.FETCH_ERROR,\n    payload: error\n  };\n};\n\nexport const fetchData = () => {\n  return async dispatch => {\n    dispatch(fetchRequest());\n    try {\n      const { data: users } = await axios.get(apiEndpoint);\n\n      dispatch(fetchSuccess(users));\n    } catch (error) {\n      dispatch(fetchError(error.message));\n    }\n  };\n};\n\nexport const postData = payload => {\n  return async dispatch => {\n    // GET DATA OBJECT YOU ARE POSTING\n    const obj = payload;\n\n    try {\n      // MAKE POST REQUEST\n      const { data: users } = await axios.post(apiEndpoint, obj);\n\n      // ADD POST DATA TO CLIENT STATE\n      const data = [...users];\n      dispatch(fetchSuccess(data));\n    } catch (error) {\n      // DISPATCH ERROR MESSAGE\n      dispatch(fetchError(error));\n    }\n  };\n};\n\nexport const deleteError = (data, error) => {\n  return {\n    type: actionType.DELETE_ERROR,\n    payload: { data, error: error.message }\n  };\n};\n\nexport const deleteData = id => {\n  return async (dispatch, getState) => {\n    dispatch(fetchRequest());\n    // store current state in previousSmurfs\n    const previousSmurfs = getState().data;\n\n    // optimistically, update on client side\n    const smurfs = [...getState().data].filter(smurf => smurf.id !== id);\n    dispatch(fetchSuccess(smurfs));\n\n    // server side update. if any fail, rollback the state with previousSmurfs\n    try {\n      await axios.delete(`${apiEndpoint}/${id}`);\n    } catch (error) {\n      dispatch(deleteError(previousSmurfs, error.message));\n    }\n  };\n};\n\nexport const updateRequest = data => {\n  return {\n    type: actionType.UPDATE_REQUEST,\n    payload: data\n  };\n};\n\nexport const updateData = (oldUser, user) => {\n  return async dispatch => {\n    // DATA OBJ BEING USED TO UPDATE\n\n    try {\n      const { data: users } = await axios.put(\n        `${apiEndpoint}/${oldUser.id}`,\n        user\n      );\n      dispatch(fetchSuccess(users));\n    } catch (error) {\n      dispatch(fetchError(error.message));\n    }\n\n    // UPDATE SERVER WITH PUT REQUEST\n\n    // UPDATE CLIENT\n    // 1. make copy of specific user\n\n    // 2. Find index of specific user in array\n\n    // 3. use specific user and index and make it equal new data\n\n    // 4. update state with new user data\n  };\n};\n","export const FETCH_REQUEST = \"FETCH_REQUEST\";\nexport const FETCH_SUCCESS = \"FETCH_SUCCESS\";\nexport const FETCH_ERROR = \"FETCH_ERROR\";\n\nexport const UPDATE_REQUEST = \"UPDATE_REQUEST\";\n\nexport const DELETE_REQUEST = \"DELETE_REQUEST\";\nexport const DELETE_ERROR = \"DELETE_ERROR\";\n","import React from \"react\";\nimport { useField } from \"formik\";\n\nconst MyTextInput = ({ label, ...props }) => {\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and also replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return (\n    <div className=\"form-group col-md-4\">\n      <label htmlFor={props.id || props.name} className=\"text-primary\">\n        {label}\n      </label>\n      <input className=\"text-input form-control\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className=\"error text-danger\">{meta.error}</div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default MyTextInput;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport TextInput from \"./forms/TextInput\";\nimport { postData, updateData } from \"../redux/actions/\";\n\nfunction SmurfForm(props) {\n  useEffect(() => {\n    console.log(\"STATE\", props.data);\n    console.log(\"UPDATING\", props.updating);\n  }, [props.data, props.updating]);\n\n  return (\n    <div className=\"container card col-10 col-md-8 my-4 p-4\">\n      <h3 className=\"font-weight-bold text-uppercase text-primary\">\n        {props.updating.name ? \"Update Smurf\" : \"Add Smurf\"}\n      </h3>\n      <Formik\n        enableReinitialize\n        initialValues={{\n          name: props.updating.name || \"\",\n          age: props.updating.age || 0,\n          height: props.updating.height || \"\"\n        }}\n        validationSchema={Yup.object({\n          name: Yup.string()\n            .max(15, \"Must be 15 characters or less\")\n            .required(\"Required\"),\n          age: Yup.number()\n            .moreThan(0.999999999, \"Must be at least 1 years old\")\n            .round()\n            .required(\"Required\"),\n          height: Yup.number()\n            .max(20, \"No smurf is that tall\")\n            .required(\"Required\")\n        })}\n        onSubmit={async (\n          values,\n          { setSubmitting, setErrors, setStatus, resetForm }\n        ) => {\n          try {\n            props.updating.name\n              ? await props.updateData(props.updating, values)\n              : await props.postData(values);\n\n            console.log(values);\n            resetForm({});\n            setStatus({ success: true });\n          } catch (error) {\n            setStatus({ success: false });\n            setSubmitting(false);\n            setErrors({ submit: error.message });\n          }\n        }}\n      >\n        <Form className=\"d-flex flex-wrap justify-content-center text-left\">\n          <TextInput\n            label=\"Full Name\"\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"Write Full Name Here...\"\n          />\n          <TextInput\n            label=\"Age\"\n            name=\"age\"\n            type=\"text\"\n            placeholder=\"Write Age Here...\"\n          />\n          <TextInput\n            label=\"Height in cm\"\n            name=\"height\"\n            type=\"text\"\n            placeholder=\"Write Value of Height Here Only...\"\n          />\n          <button\n            type=\"submit\"\n            className=\"btn btn-outline-primary mx-3 justify-self-around\"\n          >\n            {props.updating.name ? \"Update\" : \"Submit\"}\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.data,\n    updating: state.updating\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    postData: payload => dispatch(postData(payload)),\n    updateData: (oldUser, user) => dispatch(updateData(oldUser, user))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SmurfForm);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { deleteData, updateData, updateRequest } from \"../redux/actions\";\n\nfunction SmurfList(props) {\n  return (\n    <div className=\"container col-sm-12 col-md-8 table-responsive mb-4\">\n      <h3 className=\"font-weight-bold text-uppercase text-primary\">\n        Smurf List\n      </h3>\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Age</th>\n            <th scope=\"col\">Height</th>\n            <th scope=\"col\">Options</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.data.map((smurf, index) => (\n            <tr key={smurf.id}>\n              <th scope=\"row\">{index + 1}</th>\n              <td>{smurf.name}</td>\n              <td>{`${smurf.age} years old`}</td>\n              <td>{`${smurf.height}cm`}</td>\n              <td>\n                <button\n                  className=\"btn btn-primary btn-sm md-mr-2 mr-sm-1 mb-2 mb-sm-0\"\n                  onClick={() => props.updateRequest(smurf)}\n                >\n                  Update\n                </button>\n                <button\n                  className=\"btn btn-danger btn-sm md-ml-2 ml-sm-1\"\n                  onClick={() => props.deleteData(smurf.id)}\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.data\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteData: id => dispatch(deleteData(id)),\n    updateData: user => dispatch(updateData(user)),\n    updateRequest: user => dispatch(updateRequest(user))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SmurfList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchData } from \"../redux/actions\";\nimport \"./App.scss\";\nimport SmurfForm from \"./SmurfForm\";\nimport SmurfList from \"./SmurfList\";\nclass App extends Component {\n  async componentDidMount() {\n    await this.props.fetchData();\n  }\n\n  render() {\n    return (\n      <div className=\"App py-4\">\n        <h1 className=\"text-primary\">SMURFS! 2.0 W/ Redux</h1>\n        <p className=\"col-sm-6 mx-auto\">\n          React CRUD App using Redux for State Management, Axios, Formik Forms\n          with Yup Validation, and Bootstrap styling.\n        </p>\n\n        {this.props.state.error ? <p>{this.props.state.error}</p> : null}\n        <SmurfForm />\n        <SmurfList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.data,\n    state: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchData: () => dispatch(fetchData())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as actionType from \"../actions/actionTypes\";\n\nconst initialState = {\n  loading: false,\n  data: [],\n  error: \"\",\n  updating: {}\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionType.FETCH_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        updating: {}\n      };\n    case actionType.FETCH_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        data: action.payload,\n        updating: {}\n      };\n    case actionType.FETCH_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n        updating: {}\n      };\n    case actionType.DELETE_ERROR:\n      return {\n        ...state,\n        loading: false,\n        data: action.payload.data,\n        error: action.payload.error,\n        updating: {}\n      };\n    case actionType.UPDATE_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        updating: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.scss\";\nimport reducer from \"./redux/reducers\";\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}